



Programming language implementation - Wikipedia



























Jump to content







Main menu





Main menu
move to sidebar
hide



		Navigation
	


Main pageContentsCurrent eventsRandom articleAbout WikipediaContact usDonate





		Contribute
	


HelpLearn to editCommunity portalRecent changesUpload file





Languages

Language links are at the top of the page.



















Search











Search





























Create account

Log in








Personal tools





 Create account Log in





		Pages for logged out editors learn more



ContributionsTalk




























Contents
move to sidebar
hide




(Top)





1Interpreter



Toggle Interpreter subsection





1.1Virtual machine







1.2Just-in-time compiler









2Compiler







3Multiple implementations







4References







5External links

















Toggle the table of contents







Programming language implementation



7 languages




العربيةEspañolEsperanto한국어Bahasa MelayuСрпски / srpskiTiếng Việt

Edit links











ArticleTalk





English

















ReadEditView history







Tools





Tools
move to sidebar
hide



		Actions
	


ReadEditView history





		General
	


What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationCite this pageGet shortened URLDownload QR codeWikidata item





		Print/export
	


Download as PDFPrintable version





		In other projects
	


Wikimedia Commons

























From Wikipedia, the free encyclopedia


System for executing computer programs
In computer programming, a programming language implementation is a system for executing computer programs. There are two general approaches to programming language implementation:[1]

Interpretation: The program is read as input by an interpreter, which performs the actions written in the program.[2]
Compilation: The program is read by a compiler, which translates it into some other language, such as bytecode or machine code. The translated code may either be directly executed by hardware, or serve as input to another interpreter or another compiler.[2]

Interpreter[edit]
Main article: Interpreter (computing)
An interpreter is composed of two parts: a parser and an evaluator. After a program is read as input by an interpreter, it is processed by the parser. The parser breaks the program into language components to form a parse tree. The evaluator then uses the parse tree to execute the program.[3]

Virtual machine[edit]
A virtual machine is a special type of interpreter that interprets bytecode.[2] Bytecode is a portable low-level code similar to machine code, though it is generally executed on a virtual machine instead of a physical machine.[4] To improve their efficiencies, many programming languages such as Java,[4] Python,[5] and C#[6] are compiled to bytecode before being interpreted.

Just-in-time compiler[edit]
Some virtual machines include a just-in-time (JIT) compiler to improve the efficiency of bytecode execution. While the bytecode is being executed by the virtual machine, if the JIT compiler determines that a portion of the bytecode will be used repeatedly, it compiles that particular portion to machine code. The JIT compiler then stores the machine code in memory so that it can be used by the virtual machine. JIT compilers try to strike a balance between longer compilation time and faster execution time.[2]

Compiler[edit]
Main article: Compiler
A compiler translates a program written in one language into another language. Most compilers are organized into three stages: a front end, an optimizer, and a back end. The front end is responsible for understanding the program. It makes sure the program is valid and transforms it into an intermediate representation, a data structure used by the compiler to represent the program. The optimizer improves the intermediate representation to increase the speed or reduce the size of the executable which is ultimately produced by the compiler. The back end converts the optimized intermediate representation into the output language of the compiler.[7]
If a compiler of a given high level language produces another high level language, it is called a transpiler. Transpilers can be used to extend existing languages or to simplify compiler development by exploiting portable and well-optimized implementations of other languages (such as C).[2]
Many combinations of interpretation and compilation are possible, and many modern programming language implementations include elements of both. For example, the Smalltalk programming language is conventionally implemented by compilation into bytecode, which is then either interpreted or compiled by a virtual machine. Since Smalltalk bytecode is run on a virtual machine, it is portable across different hardware platforms.[8]

Multiple implementations[edit]
Programming languages can have multiple implementations. Different implementations can be written in different languages and can use different methods to compile or interpret code. For example, implementations of Python include: [9]

CPython, the reference implementation of Python
IronPython, an implementation targeting the .NET Framework (written in C#)
Jython, an implementation targeting the Java virtual machine
PyPy, an implementation designed for speed (written in RPython)
References[edit]


^ Ranta, Aarne (February 6, 2012). Implementing Programming Languages (PDF). College Publications. pp. 16–18. ISBN 9781848900646. Archived (PDF) from the original on Nov 7, 2020. Retrieved 22 March 2020.

^ a b c d e Baker, Greg. "Language Implementations". Computing Science - Simon Fraser University. Archived from the original on Mar 8, 2019. Retrieved 22 March 2020.

^ Evans, David (19 August 2011). Introduction to Computing (PDF). University of Virginia. p. 211. Retrieved 22 March 2020.

^ a b Sridhar, Jay (Aug 29, 2017). "Why the Java Virtual Machine Helps Your Code Run Better". MakeUseOf. Retrieved 22 March 2020.

^ Bennett, James (April 23, 2018). "An introduction to Python bytecode". Opensource.com. Retrieved 22 March 2020.

^ Ali, Mirza Farrukh (Oct 12, 2017). "Common Language Runtime(CLR) DotNet". Medium. Retrieved 22 March 2020.

^ Cooper, Keith; Torczon, Linda (7 February 2011). Engineering a Compiler (2nd ed.). Morgan Kaufmann. pp. 6-9. ISBN 9780120884780.

^ Lewis, Simon (May 11, 1995). The Art and Science of Smalltalk (PDF). Prentice Hall. pp. 20–21. ISBN 9780133713459. Retrieved 23 March 2020.

^ "Alternative Python Implementations". Python.org. Retrieved 23 March 2020.


External links[edit]
 Media related to Compiling and linking at Wikimedia Commons




Retrieved from "https://en.wikipedia.org/w/index.php?title=Programming_language_implementation&oldid=1192582514"
Categories: Programming language implementationProgramming language topicsHidden categories: Articles with short descriptionShort description is different from WikidataCommons category link is on Wikidata






 This page was last edited on 30 December 2023, at 04:49 (UTC).
Text is available under the Creative Commons Attribution-ShareAlike License 4.0;
additional terms may apply.  By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.


Privacy policy
About Wikipedia
Disclaimers
Contact Wikipedia
Code of Conduct
Developers
Statistics
Cookie statement
Mobile view













Toggle limited content width







