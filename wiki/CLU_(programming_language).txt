



CLU (programming language) - Wikipedia



























Jump to content







Main menu





Main menu
move to sidebar
hide



		Navigation
	


Main pageContentsCurrent eventsRandom articleAbout WikipediaContact usDonate





		Contribute
	


HelpLearn to editCommunity portalRecent changesUpload file





Languages

Language links are at the top of the page.



















Search











Search





























Create account

Log in








Personal tools





 Create account Log in





		Pages for logged out editors learn more



ContributionsTalk




























Contents
move to sidebar
hide




(Top)





1Clusters







2Other features







3Influence







4References







5External links

















Toggle the table of contents







CLU (programming language)



19 languages




العربيةDeutschEspañolفارسیFrançaisGalego한국어Italianoമലയാളം日本語Norsk bokmålPolskiPortuguêsРусскийSuomiУкраїнськаTiếng Việt粵語中文

Edit links











ArticleTalk





English

















ReadEditView history







Tools





Tools
move to sidebar
hide



		Actions
	


ReadEditView history





		General
	


What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationCite this pageGet shortened URLDownload QR codeWikidata item





		Print/export
	


Download as PDFPrintable version

























From Wikipedia, the free encyclopedia


This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed.Find sources: "CLU" programming language – news · newspapers · books · scholar · JSTOR (February 2013) (Learn how and when to remove this template message)
CLUParadigmmulti-paradigm: object-oriented, proceduralDesigned byBarbara Liskov and her studentsDeveloperMassachusetts Institute of TechnologyFirst appeared1975; 49 years ago (1975)Stable releaseNative CLU 1.5 (SPARC, VAX) / May 26, 1989; 34 years ago (1989-05-26)[1]
Portable CLU / November 6, 2009; 14 years ago (2009-11-06)[2]


Typing disciplinestrongWebsitepmg.csail.mit.edu/CLU.htmlMajor implementationsPDP-10 CLU,[3] Native CLU,[1] Portable CLU,[2] clu2c[4]Influenced byALGOL 60, Lisp, Simula, AlphardInfluencedAda, Argus, C++,[5] Lua, Python,[6] Ruby, Sather, Swift[7]
CLU is a  programming language created at the Massachusetts Institute of Technology (MIT) by Barbara Liskov and her students starting in 1973.[8] While it did not find extensive use, it introduced many features that are used widely now, and is seen as a step in the development of object-oriented programming (OOP).
Key contributions include abstract data types,[9] call-by-sharing, iterators, multiple return values (a form of parallel assignment), type-safe parameterized types, and type-safe variant types. It is also notable for its use of classes with constructors and methods, but without inheritance.


Clusters[edit]
The syntax of CLU was based on ALGOL, then the starting point for most new language designs. The key addition was the concept of a cluster, CLU's type extension system and the root of the language's name (CLUster).[10] Clusters correspond generally to the concept of a "class" in an OO language. For instance, here is the CLU syntax for a cluster that implements complex numbers:

    complex_number = cluster is add, subtract, multiply, ...
        rep = record [ real_part: real, imag_part: real ]
        add = proc ... end add;
        subtract = proc ... end subtract;
        multiply = proc ... end multiply;
        ...
    end complex_number;

A cluster is a module that encapsulates all of its components except for those explicitly named in the "is" clause. These correspond to the public components of a class in recent OO languages. A cluster also defines a type that can be named outside the cluster (in this case, "complex_number"), but its representation type (rep) is hidden from external clients.
Cluster names are global, and no namespace mechanism was provided to group clusters or allow them to be created "locally" inside other clusters.
In a cluster, the explicit type conversions up and down change between the abstract type and the representation; implicit conversions between these types are signified using the special type cvt. CLU does not otherwise perform implicit type conversions.  There is a universal type any, and a procedure force[] to check that an object is a certain type. Objects may be mutable or immutable, the latter being base types such as integers, booleans, characters and strings.[10]

Other features[edit]
Another key feature of the CLU type system are iterators, which return objects from a collection serially, one after another.[10] Iterators offer an identical application programming interface (API) no matter what data they are being used with. Thus the iterator for a collection of complex_numbers can be used interchangeably with that for an array of integers. A distinctive feature of CLU iterators is that they are implemented as coroutines, with each value being provided to the caller via a yield statement. Iterators like those in CLU are now a common feature of many modern languages, such as C#, Ruby, and Python, though recently they are often referred to as generators.
CLU also includes exception handling, based on various attempts in other languages; exceptions are raised using signal and handled with except. Unlike most other languages with exception handling, exceptions are not implicitly resignaled up the calling chain. Also unlike most other languages that provide exception handling, exceptions in CLU are considered part of ordinary execution flow and are considered a "normal" and efficient type-safe way to break out of loops or to return from functions; this allows for direct assignment of return values "except when" other conditions apply. Exceptions that are neither caught nor resignaled explicitly are immediately converted into a special failure exception that typically terminates the program.
CLU is often credited as being the first language with type-safe variant types, called oneofs, before the language ML had them.
A final distinctive feature in CLU is parallel assignment (multiple assignment), where more than one variable can appear on the left hand side of an assignment operator. For instance, writing x,y := y,x would exchange values of x and y. In the same way, functions could return several values, like x,y,z := f(t). Parallel assignment (though not multiple return values) predates CLU, appearing in CPL (1963), named simultaneous assignment,[11] but CLU popularized it and is often credited as the direct influence leading to parallel assignment in later languages.
All objects in a CLU program live in the heap, and memory management is automatic.
CLU supports type-parameterized user-defined data abstractions. It was the first language to offer type-safe bounded parameterized types, using where clauses to express constraints on actual type arguments. Unlike in languages with template-based generics, a use of such a data abstraction can be type-checked without access to the implementation of the abstraction.

Influence[edit]
CLU and Ada were major inspirations for C++ templates.[5]
CLU's exception handling mechanisms influenced later languages like C++[5] and Java.[citation needed]
Sather, Python, and C# include iterators, which first appeared in CLU.[8]
Perl and Lua took multiple assignment and multiple returns from function calls from CLU.[12]
Python and Ruby borrowed call by sharing, the yield statement,[13] and multiple assignment.[14]

References[edit]


^ a b Curtis, Dorothy (2009-11-06). "CLU home page". Programming Methodology Group, Computer Science and Artificial Intelligence Laboratory. Massachusetts Institute of Technology. Retrieved 2016-05-26.

^ a b Curtis, Dorothy (2009-11-06). "Index of /pub/pclu". Programming Methodology Group, Computer Science and Artificial Intelligence Laboratory. Massachusetts Institute of Technology. Retrieved 2016-05-26.

^ "CLU files, 1976–1989". Tapes of Tech Square (ToTS) collection, MC-0741. Department of Distinctive Collections, Massachusetts Institute of Technology. swh:1:dir:5dc935d1c236b15a99b0750cf236b2d89ec951d0.

^ Ushijima, Tetsu. "clu2c". clu2c. woodsheep.jp. Retrieved 2016-05-26.

^ a b c Stroustrup, Bjarne (1996). A History of C++: 1979--1991. New York, NY, USA: Association for Computing Machinery. pp. 699–769. doi:10.1145/234286.1057836. Retrieved 25 March 2022.

^ Lundh, Fredrik. "Call By Object". effbot.org. Archived from the original on 23 November 2019. Retrieved 21 November 2017. replace "CLU" with "Python", "record" with "instance", and "procedure" with "function or method", and you get a pretty accurate description of Python's object model.

^ Lattner, Chris (2014-06-03). "Chris Lattner's Homepage". Chris Lattner. Retrieved 2014-06-03. The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list.

^ a b Liskov, Barbara (1992). "A history of CLU". The second ACM SIGPLAN conference on History of programming languages.

^ Liskov, Barbara; Zilles, Stephen (1974). "Programming with abstract data types". Proceedings of the ACM SIGPLAN symposium on Very high level languages. pp. 50–59. CiteSeerX 10.1.1.136.3043. doi:10.1145/800233.807045.

^ a b c Liskov, B.; Snyder, A.; Atkinson, R.; Schaffert, C. (August 1977). "Abstraction mechanisms in CLU". Communications of the ACM. 20 (8): 564–576. CiteSeerX 10.1.1.112.656. doi:10.1145/359763.359789. S2CID 17343380.

^ Barron, D. W.; Buxton, J. N.; Hartley, D. F.; Nixon, E.; Strachey, C. (1963). "The main features of CPL". Computer Journal. 6 (2): 134–143. doi:10.1093/comjnl/6.2.134.

^ Ierusalimschy, R.; De Figueiredo, L. H.; Celes, W. (2007). "The evolution of Lua" (PDF). Proceedings of the third ACM SIGPLAN conference on History of programming languages – HOPL III. pp. 2-1–2-26. doi:10.1145/1238844.1238846. ISBN 978-1-59593-766-7. Archived (PDF) from the original on 2010-07-03.

^ "Ruby's Roots and Matz's Leadership". Appfolio Engineering. 2019-11-08. Retrieved 2019-11-15. Matz feels that blocks are the greatest invention of Ruby (I agree.) He got the idea from a 1970s language called CLU from MIT, which called them 'iterators'...

^ "Functional Programming HOWTO — Python 3.8.3 documentation". docs.python.org. Retrieved 2020-05-25.


External links[edit]
Official website
Liskov, Barbara (April 1992). "A History of CLU" (PDF). MIT-LCS-TR-561. Archived from the original (PDF) on 2003-09-17.
clu2c: a program to compile CLU code to C
Dictionary of Programming Languages
CLU comparison at '99 bottles of beer' multi-language demo algorithm site
Liskov, B.; Atkinson, R.; Bloom, T.; Moss, E.; Schaffert, J.C.; Scheifler, R.; Snyder, A. (1981). CLU Reference Manual. Lecture Notes in Computer Science. Vol. 114. Springer. doi:10.1007/BFb0035014. ISBN 9783540108368. S2CID 27382594.
Authority control databases: National 
Israel
United States





Retrieved from "https://en.wikipedia.org/w/index.php?title=CLU_(programming_language)&oldid=1198173624"
Categories: Articles with example CLU codeAcademic programming languagesClass-based programming languagesMassachusetts Institute of Technology softwareProcedural programming languagesProgramming languages created in 1975Programming languages created by womenHidden categories: Articles needing additional references from February 2013All articles needing additional referencesAll articles with unsourced statementsArticles with unsourced statements from August 2020Official website different in Wikidata and WikipediaArticles with J9U identifiersArticles with LCCN identifiers






 This page was last edited on 23 January 2024, at 07:41 (UTC).
Text is available under the Creative Commons Attribution-ShareAlike License 4.0;
additional terms may apply.  By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.


Privacy policy
About Wikipedia
Disclaimers
Contact Wikipedia
Code of Conduct
Developers
Statistics
Cookie statement
Mobile view













Toggle limited content width







