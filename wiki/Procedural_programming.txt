



Procedural programming - Wikipedia



























Jump to content







Main menu





Main menu
move to sidebar
hide



		Navigation
	


Main pageContentsCurrent eventsRandom articleAbout WikipediaContact usDonate





		Contribute
	


HelpLearn to editCommunity portalRecent changesUpload file





Languages

Language links are at the top of the page.



















Search











Search





























Create account

Log in








Personal tools





 Create account Log in





		Pages for logged out editors learn more



ContributionsTalk




























Contents
move to sidebar
hide




(Top)





1Development practices



Toggle Development practices subsection





1.1Modularity and scoping







1.2Sharing









2Comparison with other programming paradigms



Toggle Comparison with other programming paradigms subsection





2.1Imperative programming







2.2Object-oriented programming







2.3Functional programming







2.4Logic programming









3See also







4References







5External links

















Toggle the table of contents







Procedural programming



33 languages




العربيةБеларускаяБеларуская (тарашкевіца)DeutschEestiΕλληνικάEspañolفارسیFrançaisGaeilge한국어Bahasa IndonesiaItalianoעבריתMagyarമലയാളംBahasa MelayuМонгол日本語Norsk bokmålPolskiPortuguêsRomânăРусскийSrpskohrvatski / српскохрватскиSuomiSvenskaதமிழ்TürkçeУкраїнськаTiếng Việt粵語中文

Edit links











ArticleTalk





English

















ReadEditView history







Tools





Tools
move to sidebar
hide



		Actions
	


ReadEditView history





		General
	


What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationCite this pageGet shortened URLDownload QR codeWikidata item





		Print/export
	


Download as PDFPrintable version

























From Wikipedia, the free encyclopedia


Programming paradigm
This article is about the computer programming paradigm. For the method of algorithmic content creation, see Procedural generation.
This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed.Find sources: "Procedural programming" – news · newspapers · books · scholar · JSTOR (April 2008) (Learn how and when to remove this template message)
Procedural programming is a programming paradigm, classified as imperative programming,[1] that involves implementing the behavior of a computer program as procedures (a.k.a. functions, subroutines) that call each other. The resulting program is a series of steps that forms a hierarchy of calls to its constituent procedures.
The first major procedural programming languages appeared c. 1957–1964, including Fortran, ALGOL, COBOL, PL/I and BASIC.[2] Pascal and C were published c. 1970–1972.
Computer processors provide hardware support for procedural programming through a stack register and instructions for calling procedures and returning from them. Hardware support for other types of programming is possible, like Lisp machines or Java processors, but no attempt was commercially successful.[contradictory]


Development practices[edit]
Certain software development practices are often employed with procedural programming in order to enhance quality and lower development and maintenance costs.

Modularity and scoping[edit]
Modularity is about organizing the procedures of a program into separate modules -- each of which has a specific and understandable purpose. 
Minimizing the scope of variables and procedures can enhance software quality by reducing the cognitive load of procedures and modules.
A program lacking modularity or wide scoping tends to have procedures that consume many variables that other procedures also consume. The resulting code is relatively hard to understand and to maintain.

Sharing[edit]
Since a procedure can specify a well-defined interface and be self-contained it supports code reuse -- in particular via the software library.

Comparison with other programming paradigms[edit]
Imperative programming[edit]
Procedural programming is classified as a imperative programming, because it involves direct command of execution.
Procedural is a sub-class of imperative since procedural includes block and scope concepts, whereas imperative describes a more general concept that does not require such features. Procedural languages generally use reserved words that define blocks, such as if, while, and for, to implement control flow, whereas non-structured imperative languages (i.e. assembly language) use goto and branch tables for this purpose.

Object-oriented programming[edit]
Also classified as imperative, object-oriented programming (OOP) involves dividing a program implementation into objects that expose behavior (methods) and data (members) via a well-defined interface. In contrast, procedural programming is about dividing the program implementation into variables, data structures, and subroutines. An important distinction is that while procedural involves procedures to operate on data structures, OOP bundles the two together. An object is a data structure and the behavior associated with that data structure.[3]
Some OOP languages support the class concept which allows for creating an object based on a definition.
Nomenclature varies between the two, although they have similar semantics:



Procedural

Object-oriented


Procedure

Method


Record

Object


Module

Class


Procedure call

Message

Functional programming[edit]
The principles of modularity and code reuse in functional languages are fundamentally the same as in procedural languages, since they both stem from structured programming. So for example:

Procedures correspond to functions.  Both allow the reuse of the same code in various parts of the programs, and at various points of its execution.
By the same token, procedure calls correspond to function application.
Functions and their modularly separated from each other in the same manner, by the use of function arguments, return values and variable scopes.
The main difference between the styles is that functional programming languages remove or at least deemphasize the imperative elements of procedural programming.  The feature set of functional languages is therefore designed to support writing programs as much as possible in terms of pure functions:

Whereas procedural languages model execution of the program as a sequence of imperative commands that may implicitly alter shared state, functional programming languages model execution as the evaluation of complex expressions that only depend on each other in terms of arguments and return values.  For this reason, functional programs can have a free order of code execution, and the languages may offer little control over the order in which various parts of the program are executed; for example, the arguments to a procedure invocation in Scheme are evaluated in an arbitrary order.
Functional programming languages support (and heavily use) first-class functions, anonymous functions and closures, although these concepts have also been included in procedural languages at least since Algol 68.
Functional programming languages tend to rely on tail call optimization and higher-order functions instead of imperative looping constructs.
Many functional languages, however, are in fact impurely functional and offer imperative/procedural constructs that allow the programmer to write programs in procedural style, or in a combination of both styles.  It is common for input/output code in functional languages to be written in a procedural style.
There do exist a few esoteric functional languages (like Unlambda) that eschew structured programming precepts for the sake of being difficult to program in (and therefore challenging).  These languages are the exception to the common ground between procedural and functional languages.

Logic programming[edit]
In logic programming, a program is a set of premises, and computation is performed by attempting to prove candidate theorems. From this point of view, logic programs are declarative, focusing on what the problem is, rather than on how to solve it.
However, the backward reasoning technique, implemented by SLD resolution, used to solve problems in logic programming languages such as Prolog, treats programs as goal-reduction procedures. Thus  clauses of the form:

H :- B1, …, Bn.
have a dual interpretation, both as procedures

to show/solve H, show/solve B1 and … and Bn
and as logical implications:

B1 and … and Bn implies H.
A skilled logic programmer uses the procedural interpretation to write programs that are effective and efficient, and uses the declarative interpretation to help ensure that programs are correct.

See also[edit]
Comparison of programming paradigms
Declarative programming
Functional programming (contrast)
Imperative programming
Logic programming
Object-oriented programming
Programming paradigms
Programming language
Structured programming
SQL procedural extensions
References[edit]


^ "Programming Paradigms".

^ "Welcome to IEEE Xplore 2.0: Use of procedural programming languages for controlling production systems". Proceedings. The Seventh IEEE Conference on Artificial Intelligence Application. ieeexplore.ieee.org. doi:10.1109/CAIA.1991.120848. S2CID 58175293.

^ Stevenson, Joseph (August 2013). "Procedural programming vs object-oriented programming". neonbrand.com. Retrieved 2013-08-19.


External links[edit]
Procedural Languages at Curlie
vteProgramming paradigms (Comparison by language)ImperativeStructured
Jackson structures
Block-structured
Modular
Non-structured
Procedural
Programming in the large and in the small
Design by contract
Invariant-based
Object-oriented
Agent
Class-based
Prototype-based
Object-based
DeclarativeFunctional
Recursive
Higher-order
Purely functional
Total
Strict
Dependent types
Functional logic
Point-free style
Expression-oriented
Concatenative
Function-level / Value-level
Dataflow
Flow-based
Reactive (Functional reactive)
Signals
Streams
Synchronous
Logic
Abductive logic
Answer set
Constraint (Constraint logic)
Inductive logic
Nondeterministic
Ontology
Probabilistic logic
Query
DSL
Array
Automata-based (Action)
Differentiable
End-user
Grammar-oriented
Language-oriented
Low-code
Modeling
Natural language
Non-English-based
Pipes and filters
Probabilistic
Quantum
Scientific
Scripting
Set-theoretic
Stack-based
Tactile
Templating
Visual
Concurrent/Distributed/Parallel
Actor-based
Automatic mutual exclusion
Choreographic programming
Concurrent logic (Concurrent constraint logic)
Concurrent OO
Macroprogramming
Multitier programming
Organic computing
Parallel programming models
Partitioned global address space
Process-oriented
Relativistic programming
Service-oriented
Structured concurrency
Metaprogramming
Attribute-oriented
Automatic (Inductive)
Dynamic
Extensible
Generic
Homoiconicity
Interactive
Macro
Metalinguistic abstraction
Multi-stage
Program synthesis (Bayesian, Inferential, by demonstration, by example)
Reflective
Self-modifying code
Symbolic
Template
Separation of concerns
Aspects
Components
Data-driven
Data-oriented
Event-driven
Features
Intentional
Literate
Roles
Subjects

vteTypes of programming languagesParadigm
Actor-based
Array
Aspect-oriented
Class-based
Concatenative
Concurrent
Dataflow
Declarative
Differentiable
Domain-specific
Dynamic
Esoteric
Event-driven
Extensible
Functional
Imperative
Logic
Macro
Metaprogramming
Object-based
Object-oriented
Pipeline
Procedural
Prototype-based
Reflective
Rule-based
Scripting
Stack-oriented
Synchronous
Tactile
Template
Level
Machine
Assembly
Compiled
Interpreted
Low-level
High-level
Very high-level
Generation
First
Second
Third
Fourth
Fifth
Related
Non-English-based
Visual





Retrieved from "https://en.wikipedia.org/w/index.php?title=Procedural_programming&oldid=1202460697"
Category: Programming paradigmsHidden categories: Articles with short descriptionShort description matches WikidataArticles needing additional references from April 2008All articles needing additional referencesArticles contradicting other articlesArticles with Curlie links






 This page was last edited on 2 February 2024, at 20:41 (UTC).
Text is available under the Creative Commons Attribution-ShareAlike License 4.0;
additional terms may apply.  By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.


Privacy policy
About Wikipedia
Disclaimers
Contact Wikipedia
Code of Conduct
Developers
Statistics
Cookie statement
Mobile view













Toggle limited content width







