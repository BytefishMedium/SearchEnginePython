



CoffeeScript - Wikipedia



























Jump to content







Main menu





Main menu
move to sidebar
hide



		Navigation
	


Main pageContentsCurrent eventsRandom articleAbout WikipediaContact usDonate





		Contribute
	


HelpLearn to editCommunity portalRecent changesUpload file





Languages

Language links are at the top of the page.



















Search











Search





























Create account

Log in








Personal tools





 Create account Log in





		Pages for logged out editors learn more



ContributionsTalk




























Contents
move to sidebar
hide




(Top)





1History







2Syntax







3Development and distribution







4Latest additions







5Extensions







6Adoption







7See also







8References







9Further reading







10External links

















Toggle the table of contents







CoffeeScript



22 languages




AlemannischالعربيةAzərbaycancaCatalàDeutschEspañolفارسیFrançais한국어ՀայերենItalianoമലയാളം日本語PolskiPortuguêsРусскийSimple EnglishТатарча / tatarçaTürkçeУкраїнська粵語中文

Edit links











ArticleTalk





English

















ReadEditView history







Tools





Tools
move to sidebar
hide



		Actions
	


ReadEditView history





		General
	


What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationCite this pageGet shortened URLDownload QR codeWikidata item





		Print/export
	


Download as PDFPrintable version

























From Wikipedia, the free encyclopedia


Programming language which compiles to JavaScript
CoffeeScriptParadigmMulti-paradigm: prototype-based, functional, imperative, scriptingDesigned byJeremy AshkenasDeveloperJeremy AshkenasFirst appearedDecember 13, 2009; 14 years ago (2009-12-13)Stable release2.7.0[1] 
   /    24 April 2022; 21 months ago (24 April 2022)
Typing disciplinedynamic, implicitOSCross-platformLicenseMIT LicenseFilename extensions.coffee, .litcoffee[citation needed]Websitecoffeescript.orgInfluenced byHaskell, JavaScript, Perl,[citation needed] Python,[2] Ruby, YAML[3]InfluencedMoonScript, LiveScript, JavaScript
CoffeeScript is a programming language that compiles to JavaScript. It adds syntactic sugar inspired by Ruby, Python, and Haskell in an effort to enhance JavaScript's brevity and readability.[4] Specific additional features include list comprehension and destructuring assignment.
CoffeeScript support is included in Ruby on Rails version 3.1[5] and Play Framework.[6] In 2011, Brendan Eich referenced CoffeeScript as an influence on his thoughts about the future of JavaScript.[7][8]


History[edit]
On December 13, 2009, Jeremy Ashkenas made the first Git commit of CoffeeScript with the comment: "initial commit of the mystery language."[9] The compiler was written in Ruby. On December 24, he made the first tagged and documented release, 0.1.0. On February 21, 2010, he committed version 0.5, which replaced the Ruby compiler with a self-hosting version in pure CoffeeScript. By that time the project had attracted several other contributors on GitHub, and was receiving over 300 page hits per day.
On December 24, 2010, Ashkenas announced the release of stable 1.0.0 to Hacker News, the site where the project was announced for the first time.[10][11]
On September 18, 2017, version 2.0.0 was introduced,[12] which "aims to bring CoffeeScript into the modern JavaScript era, closing gaps in compatibility with JavaScript while preserving the clean syntax that is CoffeeScript’s hallmark."

Syntax[edit]
Almost everything is an expression in CoffeeScript, for example, if, switch and for expressions (which have no return value in JavaScript) return a value. As in Perl and Ruby, these control statements also have postfix versions; for example, if can also be written in  consequent if condition form.
Many unnecessary parentheses and braces can be omitted; for example, blocks of code can be denoted by indentation instead of braces, function calls are implicit, and object literals are often detected automatically.
To compute the body mass index in JavaScript, one could write:

const mass = 72;
const height = 1.78;
const BMI = mass / height ** 2;
if (18.5 <= BMI && BMI < 25) { alert('You are healthy!') }

With CoffeeScript the interval is directly described:

mass = 72
height = 1.78
BMI = mass / height**2
alert 'You are healthy!' if 18.5 <= BMI < 25

To compute the greatest common divisor of two integers with the Euclidean algorithm, in JavaScript one usually needs a while loop:

gcd = (x, y) => {
  do {
    [x, y] = [y, x%y];
  } while (y !== 0)
  return x;
}

Whereas in CoffeeScript one can use until[13] instead:

gcd = (x, y) ->
  [x, y] = [y, x%y] until y is 0
  x

The ? keyword quickly checks if a variable is null or undefined :

personCheck = ->
  if not person? then alert("No person") else alert("Have person")
person = null
personCheck()
person = "Ivan"
personCheck()

This would alert "No person" if the variable is null or undefined and "Have person" if there is something there.
A common pre-es6 JavaScript snippet using the jQuery library is:

$(document).ready(function() {
  // Initialization code goes here
});

Or even just:

$(function() {
  // Initialization code goes here
});

In CoffeeScript, the function keyword is replaced by the -> symbol, and indentation is used instead of curly braces, as in other off-side rule languages such as Python and Haskell.  Also, parentheses can usually be omitted, using indentation level instead to denote a function or block. Thus, the CoffeeScript equivalent of the snippet above is:

$(document).ready ->
  # Initialization code goes here

Or just:

$ ->
  # Initialization code goes here

Ruby-style string interpolation is included in CoffeeScript. Double-quoted strings allow for interpolated values, using #{ ... }, and single-quoted strings are literal.[14]

author = "Wittgenstein"
quote  = "A picture is a fact. -- #{ author }"

sentence = "#{ 22 / 7 } is a decent approximation of π"

Any for loop can be replaced by a list comprehension; so that to compute the squares of the positive odd numbers smaller than ten (i.e. numbers whose remainder modulo 2 is 1), one can do:

alert n*n for n in [1..10] when n%2 is 1

Alternatively, there is:

alert n*n for n in [1..10] by 2

A linear search can be implemented with a one-liner using the when keyword:

names = ["Ivan", "Joanna", "Nikolay", "Mihaela"]
linearSearch = (searchName) -> alert(name) for name in names when name is searchName

The for ... in syntax allows looping over arrays while the for ... of syntax allows looping over objects.
CoffeeScript has been criticized for its unusual scoping
rules.[15][16] In particular, it completely disallows variable shadowing which makes reasoning about code more difficult and
error-prone in some basic programming patterns established
by and taken for granted since procedural programming
principles were defined.
For example, with the following code snippet in JavaScript
one does not have to look outside the {}-block to know for
sure that no possible foo variable in the outer scope can be
incidentally overridden:

  // ...
  function baz() {
    var foo = "bar";
    console.log(`foo = ${foo}`);
  }
  // ...
}

In CoffeeScript there is no way to tell if the scope of a variable
is limited to a block or not without looking outside the block.

Development and distribution[edit]
The CoffeeScript compiler has been self-hosting since version 0.5 and is available as a Node.js utility; however, the core compiler does not rely on Node.js and can be run in any JavaScript environment.[17] One alternative to the Node.js utility is the Coffee Maven Plugin, a plugin for the Apache Maven build system. The plugin uses the Rhino JavaScript engine written in Java.[citation needed]
The official site at CoffeeScript.org has a "Try CoffeeScript" button in the menu bar; clicking it opens a modal window in which users can enter CoffeeScript, see the JavaScript output, and run it directly in the browser. The js2coffee[18] site provides bi-directional translation.

Latest additions[edit]
Source maps allow users to debug their CoffeeScript code directly, supporting CoffeeScript tracebacks on run time errors.
CoffeeScript supports a form of Literate Programming, using the .coffee.md or .litcoffee file extension. This allows CoffeeScript source code to be written in Markdown.  The compiler will treat any indented blocks (Markdown's way of indicating source code) as code, and ignore the rest as comments.
Extensions[edit]
Iced CoffeeScript is a superset of CoffeeScript which adds two new keywords: await and defer. These additions simplify asynchronous control flow, making the code look more like a procedural programming language, eliminating the call-back chain. It can be used on the server side and in the browser.[19]

Adoption[edit]
On September 13, 2012, Dropbox announced that their browser-side code base had been rewritten from JavaScript to CoffeeScript,[20] however it was migrated to TypeScript in 2017.[21]
GitHub's internal style guide once said "write new JS in CoffeeScript", though it no longer does, [22] and their Atom text editor was also written in the language.[23]
Pixel Game Maker MV makes uses of CoffeeScript as part of its game development environment.[24]

See also[edit]

Free and open-source software portal
Haxe
Nim (programming language)
Amber Smalltalk
Clojure
Dart (programming language)
Kotlin (programming language)
LiveScript
Opa (programming language)
Elm (programming language)
TypeScript
PureScript
References[edit]


^ "2.7.0". 24 April 2022. Retrieved 9 August 2022.

^ https://coffeescript.org/ "CoffeeScript borrows chained comparisons from Python"

^ Heller, Martin (October 18, 2011). "Turn up your nose at Dart and smell the CoffeeScript". InfoWorld. Retrieved 2020-07-15.

^ Alex MacCaw (January 2012). The Little Book on CoffeScript. O'Reilly Media. ISBN 978-1-4493-2105-5.

^ Josh Peek (April 13, 2011). "Tweet by Rails Core Team Member".

^ "AssetsCoffeeScript - 2.5.x". www.playframework.com. Retrieved 2016-10-31.

^ Eich, Brendan. "Harmony of My Dreams"

^ Eich, Brendan. "My JSConf.US Presentation"

^ Github. 'initial commit of the mystery language'

^ Hacker News. CoffeeScript 1.0.0 announcement posted by Jeremy Ashkenas on Dec 24, 2010

^ Hacker News. Original CoffeeScript announcement posted by Jeremy Ashkenas on Dec 24, 2009

^ coffeescript.org Announcing CoffeeScript 2

^ CoffeeScript calls this "pattern matching", which is a non-standard use of that term.

^ "Official CoffeeScript Page". Retrieved 20 November 2013.

^ "The Problem with Implicit Scoping in CoffeeScript". Retrieved 2018-10-13.

^ "CoffeeScript's Scoping is Madness". Retrieved 2018-10-13.

^ CoffeeScript Archived 2012-04-27 at the Wayback Machine. Jashkenas.github.com. Retrieved on 2013-07-21.

^ Sta Cruz, Rico. "js2coffee". Retrieved 11 May 2014.

^ "Official IcedCoffeeScript website".

^ Wheeler, Dan; Mahkovec, Ziga; Varenhorst, Chris (13 September 2012). "Dropbox dives into CoffeeScript". Retrieved 11 May 2013.

^ Goldstein, David (13 May 2020). "The Great CoffeeScript to Typescript Migration of 2017". Dropbox.Tech. Retrieved 30 June 2020.

^ "JavaScript · Styleguide · GitHub". Github.com. Archived from the original on 2013-08-15. Retrieved 2015-11-30.

^ Atom source code. github.com. Retrieved on 2021-06-26.

^ Cullen, Daniel. "PIXEL GAME MAKER MV (PC)". Christ Centered Gaming. Retrieved 15 January 2021.


Further reading[edit]
Lee, Patrick (May 14, 2014). CoffeeScript in Action (First ed.). Manning Publications. p. 432. ISBN 978-1617290626.
Grosenbach, Geoffrey (May 12, 2011). "Meet CoffeeScript" (First ed.). PeepCode. {{cite journal}}: Cite journal requires |journal= (help)
Bates, Mark (May 31, 2012). Programming in CoffeeScript (First ed.). Addison-Wesley. p. 350. ISBN 978-0-321-82010-5.
MacCaw, Alex (January 31, 2012). The Little Book on CoffeeScript (First ed.). O'Reilly Media. p. 62. ISBN 978-1449321055.
Burnham, Trevor (August 3, 2011). CoffeeScript: Accelerated JavaScript Development (First ed.). Pragmatic Bookshelf. p. 138. ISBN 978-1934356784.
External links[edit]
Official website 
vteProgramming languages
Comparison
Timeline
History

Ada
ALGOL
APL
ArkTS
Assembly
BASIC
C
C++
C#
Classic Visual Basic
COBOL
Erlang
Forth
Fortran
Go
Haskell
Java
JavaScript
Julia
Kotlin
Lisp
Lua
MATLAB
ML
Object Pascal
Pascal
Perl
PHP
Prolog
Python
R
Ruby
Rust
SQL
Scratch
Shell
Simula
Smalltalk
Swift
Visual Basic
more...

 Lists: Alphabetical
Categorical
Generational
Non-English-based
 Category

vteJavaScriptCode analysis
ESLint
JSHint
JSLint
Supersets
JS++
TypeScript
ArkTS
Transpilers
AtScript
Babel
ClojureScript
CoffeeScript
Dart
Elm
Emscripten
Google Closure Compiler
Google Web Toolkit
Haxe
LiveScript
Morfik
Nim
Opa
PureScript
Reason
WebSharper
Concepts
JavaScript library
JavaScript syntax
Debuggers
Chrome DevTools
Firefox Inspector
Komodo IDE
Microsoft Edge DevTools
Opera DevTools
Safari Web Inspector
Doc generators
JSDoc
Editors (comparison)
Ace
Cloud9 IDE
Atom
CodeMirror
Brackets
Light Table
PhpStorm
Orion
Visual Studio
Visual Studio Express
Visual Studio Code
Visual Studio Team Services
Vim
Engines
List of ECMAScript engines
Frameworks
Comparison of JavaScript frameworks
List of JavaScript libraries
Related technologies
Ajax
AssemblyScript
asm.js
Cascading Style Sheets
Document Object Model
HTML
HTML5
JSON
WebAssembly
WebAuthn
Package managers
npm
yarn
Module bundlers
Webpack
Vite
esbuild
Server-side
Active Server Pages
Bun
CommonJS
Deno
JSGI
Node.js
Wakanda
Unit testing frameworks (list)
Jasmine
Jest
Mocha
QUnit
People
Douglas Crockford
Ryan Dahl
Brendan Eich
John Resig

vteNode.jsPlatform
Node.js
npm
V8
CommonJS
Frameworks
MEAN
MongoDB
Express.js
AngularJS/Angular
MEEN (substituted with Ember.js)
Backbone.js
Meteor
Sails.js (uses Express.js)
Next.js
Libraries
Lodash
Underscore.js
React.js
Vue.js
Languages
JavaScript
CoffeeScript
TypeScript

Authority control databases: National 
Israel
United States





Retrieved from "https://en.wikipedia.org/w/index.php?title=CoffeeScript&oldid=1189860738"
Categories: Dynamic programming languagesProgramming languages created in 2009JavaScript programming language familyPrototype-based programming languagesSoftware using the MIT licenseSource-to-source compilersHigh-level programming languages2009 softwareFree software projectsHidden categories: Webarchive template wayback linksArticles with short descriptionShort description matches WikidataAll articles with unsourced statementsArticles with unsourced statements from September 2020Articles with unsourced statements from January 2016Articles with unsourced statements from May 2019CS1 errors: missing periodicalArticles with J9U identifiersArticles with LCCN identifiers






 This page was last edited on 14 December 2023, at 13:52 (UTC).
Text is available under the Creative Commons Attribution-ShareAlike License 4.0;
additional terms may apply.  By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.


Privacy policy
About Wikipedia
Disclaimers
Contact Wikipedia
Code of Conduct
Developers
Statistics
Cookie statement
Mobile view













Toggle limited content width







