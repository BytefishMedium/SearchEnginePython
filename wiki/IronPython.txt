



IronPython - Wikipedia



























Jump to content







Main menu





Main menu
move to sidebar
hide



		Navigation
	


Main pageContentsCurrent eventsRandom articleAbout WikipediaContact usDonate





		Contribute
	


HelpLearn to editCommunity portalRecent changesUpload file





Languages

Language links are at the top of the page.



















Search











Search





























Create account

Log in








Personal tools





 Create account Log in





		Pages for logged out editors learn more



ContributionsTalk




























Contents
move to sidebar
hide




(Top)





1Status and roadmap



Toggle Status and roadmap subsection





1.1Differences with CPython









2Silverlight







3License







4Interface extensibility







5Examples







6Performance







7See also







8References







9External links

















Toggle the table of contents







IronPython



21 languages




العربيةCatalàČeštinaDeutschEspañolفارسیFrançais한국어ItalianoעבריתമലയാളംNederlands日本語PolskiPortuguêsРусскийСрпски / srpskiSuomiTürkçeУкраїнська中文

Edit links











ArticleTalk





English

















ReadEditView history







Tools





Tools
move to sidebar
hide



		Actions
	


ReadEditView history





		General
	


What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationCite this pageGet shortened URLDownload QR codeWikidata item





		Print/export
	


Download as PDFPrintable version





		In other projects
	


Wikimedia Commons

























From Wikipedia, the free encyclopedia


This article relies excessively on references to primary sources. Please improve this article by adding secondary or tertiary sources. Find sources: "IronPython" – news · newspapers · books · scholar · JSTOR (January 2013) (Learn how and when to remove this template message)
IronPythonOriginal author(s)Jim Hugunin, MicrosoftDeveloper(s)Dino Viehland,.NET FoundationInitial releaseSeptember 5, 2006; 17 years ago (2006-09-05)[1]Stable release3.4.0
   / December 12, 2022; 14 months ago (2022-12-12)Preview release3.4.0-beta1
   / April 30, 2022; 21 months ago (2022-04-30)
Repositorygithub.com/IronLanguages/ironpython2 
Written inC#Operating systemWindows, Linux, macOSPlatform.NET Framework, .NET, MonoTypePython programming language implementationLicenseApache License 2.0Websiteironpython.net 
IronPython is an implementation of the Python programming language targeting the .NET and Mono frameworks. The project is currently maintained by a group of volunteers at GitHub. It is free and open-source software, and can be implemented with Python Tools for Visual Studio, which is a free and open-source extension for Microsoft's Visual Studio IDE.[2][3]
IronPython is written entirely in C#, although some of its code is automatically generated by a code generator written in Python.
IronPython is implemented on top of the Dynamic Language Runtime (DLR), a library running on top of the Common Language Infrastructure that provides dynamic typing and dynamic method dispatch, among other things, for dynamic languages.[4] The DLR is part of the .NET Framework 4.0 and is also a part of Mono since version 2.4 from 2009.[5] The DLR can also be used as a library on older CLI implementations.


Status and roadmap[edit]
Jim Hugunin created the project and actively contributed to it up until Version 1.0 which was released on September 5, 2006.[6] IronPython 2.0 was released on December 10, 2008.[7] After version 1.0 it was maintained by a small team at Microsoft until the 2.7 Beta 1 release. Microsoft abandoned IronPython (and its sister project IronRuby) in late 2010, after which Hugunin left to work at Google.[8] The project is currently maintained by a group of volunteers at GitHub.

Release 2.0, released on December 10, 2008, and updated as 2.0.3 on October 23, 2009, targets CPython 2.5.[9] IronPython 2.0.3 is only compatible up to .NET Framework 3.5.
Release 2.6, released on December 11, 2009, and updated on April 12, 2010, targets CPython 2.6.[10] IronPython 2.6.1 versions is binary compatible only with .NET Framework 4.0. IronPython 2.6.1 must be compiled from sources to run on .NET Framework 3.5. IronPython 2.6.2, released on October 21, 2010, is binary compatible with both .NET Framework 4.0 and .NET Framework 3.5.
Release 2.7 was released on March 12, 2011 and it targets CPython 2.7.[11]
Release 2.7.1 was released on October 21, 2011 and it targets CPython 2.7.[12]
Release 2.7.2.1 was released on March 13, 2012. It enables support for ZIP file format libraries, SQLite, and compiled executables.[13]
Release 2.7.4 was released on September 7, 2013.[14]
Release 2.7.5 was released on December 6, 2014 and mostly consists of bug fixes.[15]
Release 2.7.6 was released on August 21, 2016 and only consists of bug fixes.[16]
Release 2.7.7 was released on December 7, 2016 and only consists of bug fixes.[17]
Release 2.7.8 was released on February 16, 2018 and consists of bug fixes, reorganized code, and an updated test infrastructure (including significant testing on Linux under Mono). It is also the first release to support .NET Core.[18]
Release 2.7.9 was released on October 9, 2018 and consists of bug fixes, reorganized code. It is intended to be the last release before IronPython 3.[19]
Release 2.7.10 was released on April 27, 2020 and adds .NET Core 3.1 support.[20]
Release 2.7.11 was released on November 17, 2020 and resolves issues when running on .NET 5.
Release 2.7.12 was released on January 21, 2022 and resolves issues with .NET 6 and removes support for .NET core 2.1[21]
Release 3.4.0 was released on December 12, 2022 and is the first release to support Python 3.x. [22]
Differences with CPython[edit]
This section needs expansion. You can help by adding to it.  (July 2012)
There are some differences between the Python reference implementation CPython and IronPython.[23] Some projects built on top of IronPython are known not to work under CPython.[24] Conversely, CPython applications that depend on extensions to the language that are implemented in C are not compatible with IronPython
,[25] unless they are implemented in a .NET interop. For example, NumPy was wrapped by Microsoft in 2011, allowing code and libraries dependent on it to be run directly from .NET Framework.[26]

Silverlight[edit]
IronPython is supported on Silverlight (which is deprecated by Microsoft and already has lost support in most web browsers[27]). It can be used as a scripting engine in the browser just like the JavaScript engine.[28] IronPython scripts are passed like simple client-side JavaScript scripts in <script>-tags. It is then also possible to modify embedded XAML markup.
The technology behind this is called Gestalt.[citation needed]

// DLR initialization script.
<script src="http://gestalt.ironpython.net/dlr-latest.js" type="text/javascript"></script>

// Client-side script passed to IronPython and Silverlight.
<script type="text/python">
    window.Alert("Hello from Python")
</script>

The same works for IronRuby.

License[edit]
Until version 0.6, IronPython was released under the terms of Common Public License.[29] Following recruitment of the project lead in August 2004, IronPython was made available as part of Microsoft's Shared Source initiative. This license is not OSI-approved but the authors claim it meets the open-source definition.[30] With the 2.0 alpha release, the license was changed to the Microsoft Public License,[31] which the OSI has approved. The latest versions are released under the terms of the Apache License 2.0.

Interface extensibility[edit]
One of IronPython's key advantages is in its function as an extensibility layer to application frameworks written in a .NET language. It is relatively simple to integrate an IronPython interpreter into an existing .NET application framework. Once in place, downstream developers can use scripts written in IronPython that interact with .NET objects in the framework, thereby extending the functionality in the framework's interface, without having to change any of the framework's code base.[32]
IronPython makes extensive use of reflection. When passed in a reference to a .NET object, it will automatically import the types and methods available to that object. This results in a highly intuitive experience when working with .NET objects from within an IronPython script.

Examples[edit]
The following IronPython script manipulates .NET Framework objects. This script can be supplied by a third-party client-side application developer and passed into the server-side framework through an interface. Note that neither the interface, nor the server-side code is modified to support the analytics required by the client application.

from BookService import BookDictionary
 
booksWrittenByBookerPrizeWinners = [book.Title for book in BookDictionary.GetAllBooks() 
                                    if "Booker Prize" in book.Author.MajorAwards]

In this case, assume that the .NET Framework implements a class, BookDictionary, in a module called BookService, and publishes an interface into which IronPython scripts can be sent and executed.
This script, when sent to that interface, will iterate over the entire list of books maintained by the framework, and pick out those written by Booker Prize-winning authors.
What's interesting is that the responsibility for writing the actual analytics reside with the client-side developer. The demands on the server-side developer are minimal, essentially just providing access to the data maintained by the server. This design pattern greatly simplifies the deployment and maintenance of complex application frameworks.
The following script uses the .NET Framework to create a simple Hello World message.

import clr
clr.AddReference("System.Windows.Forms")

from System.Windows.Forms import MessageBox
MessageBox.Show("Hello World")

Performance[edit]
The performance characteristics of IronPython compared to CPython, the reference implementation of Python, depends on the exact benchmark used. IronPython performs worse than CPython on most benchmarks taken with the PyStone script but better on other benchmarks.[33]
IronPython may perform better in Python programs that use threads or multiple cores, as it has a JIT compiler, and also because it doesn't have the Global Interpreter Lock.[34][35]

See also[edit]

Free and open-source software portalComputer programming portal
Boo – a language for the .NET Framework and Mono with Python-inspired syntax and features borrowed from C# and Ruby
Cobra
IronScheme
Jython – an implementation of Python for the Java Virtual Machine
Cython
PyPy – a self-hosting interpreter for the Python programming language
Tao Framework
Unladen Swallow – A (now-defunct) branch of CPython that aimed to provide superior performance using an LLVM-based just-in-time compiler

References[edit]


^ "CodePlex Archive". Archived from the original on 2017-12-26. Retrieved 2014-05-30.

^ "IronPython.net". Retrieved 2013-07-03.

^ "Python Tools for Visual Studio- Home". Python Tools for Visual Studio. Archived from the original on 2018-01-26. Retrieved 2013-07-03.

^ "Dynamic Language Runtime Overview". Microsoft. Retrieved 2014-04-01.

^ "2009-07-02 Marek Safar · mono/Mono@340222f". GitHub.

^ "Jim Hugunin's blog: IronPython 1.0 released today!". 2006-09-05. Retrieved 2006-12-14.

^ "Release dates for ironpython". 2008-12-10. Retrieved 2009-01-25.

^ Clarke, Gavin (2010-10-22). "Microsoft cuts loose Iron languages". The Register. Retrieved 2012-04-05.

^ "2.0.3". ironpython.codeplex.com. Archived from the original on 2017-12-26. Retrieved 2010-10-16.

^ "2.6". ironpython.codeplex.com. Archived from the original on 2018-01-13. Retrieved 2010-10-16.

^ "2.7". ironpython.codeplex.com. Archived from the original on 2018-01-02. Retrieved 2011-03-12.

^ "2.7.1". ironpython.codeplex.com. Archived from the original on 2017-12-26. Retrieved 2011-12-30.

^ "2.7.2.1". ironpython.codeplex.com. Archived from the original on 2017-12-26. Retrieved 2012-03-24.

^ "2.7.4". ironpython.codeplex.com. Archived from the original on 2018-01-16. Retrieved 2014-12-07.

^ "2.7.5". ironpython.codeplex.com. Archived from the original on 2018-01-26. Retrieved 2014-12-07.

^ "2.7.6". github.com. Retrieved 2016-08-21.

^ "2.7.7". github.com. Retrieved 2018-01-05.

^ "2.7.8". github.com. Retrieved 2018-01-05.

^ "2.7.9". github.com. Retrieved 2018-10-09.

^ "IronLanguages/ironpython2". GitHub. Retrieved 2020-06-26.

^ "Releases · IronLanguages/ironpython2". GitHub. Retrieved 2022-08-08.

^ "Releases · IronLanguages/ironpython3". GitHub. Retrieved 2023-07-09.

^ "Differences between IronPython 1.0 and CPython 2.4.3". Microsoft. 2007-12-18. Retrieved 2008-02-09.

^ Foord, Michael. "New Project: Implementing .NET Libraries in Pure Python". Archived from the original on 2008-08-30. Retrieved 2008-02-09.

^ Eby, Phillip (15 October 2005). "Children of a Lesser Python". Retrieved 2008-07-09.

^ "NumPy and SciPy for .NET". Retrieved 2019-04-05.

^ "Silverlight 5 System Requirements". www.microsoft.com. Retrieved 2019-11-16.

^ "Write browser applications in Python". IronPython.net. Archived from the original on 2013-03-17.

^ "Original IronPython homepage". 2004-07-28. Archived from the original on February 23, 2010. Retrieved 2007-05-13.

^ "Shared Source License for IronPython". 2006-04-28. Retrieved 2007-05-13.

^ "Microsoft permissive license". 2007-04-28. Retrieved 2007-05-13.

^ "Using .NET objects from IronPython in Resolver One". Archived from the original on 2009-01-14. Retrieved 2008-11-18.

^ "IronPython Performance Report". Archived from the original on January 19, 2013. Retrieved 2009-10-05.

^ "IronPython at python.org". python.org. Retrieved 2011-04-04. IronPython has no GIL and multi-threaded code can use multi core processors.

^ "Python's Hardest Problem, Revisited". Archived from the original on 2015-10-31. Retrieved 2015-07-15.


External links[edit]
Official website 
vtePythonImplementations
CircuitPython
CLPython
CPython
Cython
MicroPython
Numba
IronPython
Jython
Psyco
PyPy
Python for S60
Shed Skin
Stackless Python
Unladen Swallow
more...
IDE
Boa
Eric Python IDE
IDLE
PyCharm
PyDev
Ninja-IDE
more...
Topics
WSGI
ASGI

software (list)
Python Software Foundation
PyCon

vteCommon Language InfrastructureArchitecture
Application domain
Code Access Security
Common Intermediate Language
instructions
Common Type System
Platform Invocation Services
Virtual Execution System
Components
Assembly
Delegate
Global Assembly Cache
Manifest
Metadata
Standard Libraries
ImplementationsMicrosoft
.NET
.NET Framework
.NET Compact Framework
.NET Micro Framework
Other
Mono
DotGNU
LanguagesMajor languages
C#
Visual Basic
F#
PowerShell
Other
Axum
A#
Boo
Cobra
C++/CLI
IronScheme
IronPython
IronRuby
JScript .NET
J#
Nemerle
Oxygene
Phalanger
Q#
Scala
Small Basic
X#
Comparison
C# and Java
C# and Visual Basic .NET
Java and .NET platforms
Visual Basic and Visual Basic .NET

vteMicrosoft free and open-source software (FOSS)Overview
Microsoft and open source
Shared Source Initiative
SoftwareApplications
3D Movie Maker
Atom
Conference XP
Family.Show
File Manager
Open Live Writer
Microsoft PowerToys
Terminal
Windows Calculator
Windows Console
Windows Package Manager
WorldWide Telescope
XML Notepad
Video games
Allegiance
Programminglanguages
Bosque
C#
Dafny
F#
F*
GW-BASIC
IronPython
IronRuby
Lean
P
Power Fx
PowerShell
Project Verona
Q#
R Open
Small Basic Online
TypeScript
Visual Basic
Frameworks,development tools
.NET
.NET Bio
.NET Framework
.NET Gadgeteer
.NET MAUI
.NET Micro Framework
AirSim
ASP.NET
ASP.NET AJAX
ASP.NET Core
ASP.NET MVC
ASP.NET Razor
ASP.NET Web Forms
Avalonia
Babylon.js
BitFunnel
Blazor
C++/WinRT
CCF
ChakraCore
CLR Profiler
Dapr
DeepSpeed
DiskSpd
Dryad
Dynamic Language Runtime
eBPF on Windows
Electron
Entity Framework
Fluent Design System
Fluid Framework
Infer.NET
LightGBM
Managed Extensibility Framework
Microsoft Automatic Graph Layout
Microsoft C++ Standard Library
Microsoft Cognitive Toolkit
Microsoft Design Language
Microsoft Detours
Microsoft Enterprise Library
Microsoft SEAL
mimalloc
Mixed Reality Toolkit
ML.NET
mod_mono
Mono
MonoDevelop
MSBuild
MsQuic
Neural Network Intelligence
npm
NuGet
OneFuzz
Open Management Infrastructure
Open Neural Network Exchange
Open Service Mesh
Open XML SDK
Orleans
Playwright
ProcDump
ProcMon
Python Tools for Visual Studio
R Tools for Visual Studio
RecursiveExtractor
Roslyn
Sandcastle
SignalR
StyleCop
SVNBridge
T2 Temporal Prover
Text Template Transformation Toolkit
TLA+ Toolbox
U-Prove
vcpkg
Virtual File System for Git
Visual Studio Code
Voldemort
VoTT
Vowpal Wabbit
Windows App SDK
Windows Communication Foundation
Windows Driver Frameworks
KMDF
UMDF
Windows Forms
Windows Presentation Foundation
Windows Template Library
Windows UI Library
WinJS
WinObjC
WiX
XDP for Windows
XSP
xUnit.net
Z3 Theorem Prover
Operating systems
MS-DOS (v1.25 & v2.0)
Barrelfish
SONiC
CBL-Mariner
Other
ChronoZoom
Extensible Storage Engine
FlexWiki
FourQ
Gollum
Project Mu
ReactiveX
SILK
TLAPS
TPM 2.0 Reference Implementation
WikiBhasha
Licenses
Microsoft Public License
Microsoft Reciprocal License
Forges
CodePlex
GitHub
Related
.NET Foundation
F# Software Foundation
Microsoft Open Specification Promise
Open Letter to Hobbyists
Open Source Security Foundation
Outercurve Foundation
 Category
vteMicrosoft development toolsDevelopmentenvironmentsVisual Studio
Code
Express
Team System Profiler
Tools for Applications
Tools for Office
Others
Blend
Expression Web
FxCop
GW-BASIC
MACRO-80
Macro Assembler
MSBuild
Pascal
QuickBASIC
QBasic
QuickC
Robotics Developer Studio
Roslyn
SharePoint Designer
FrontPage
Small Basic
WebMatrix
Windows App SDK
Windows App Studio
Windows SDK
CLR Profiler
ILAsm
Native Image Generator
WinDiff
XAMLPad
Languages
Dynamics AX
BASIC
Visual Basic
legacy
VB.NET
VBA
VBScript
Bosque
Visual C++
C++/CX
C++/CLI
Managed C++
C++/WinRT
C#
C/AL
Dafny
Dexterity
F#
F*
Visual FoxPro
Java
J++
J#
JavaScript
TypeScript
JScript
IronPython
IronRuby
Lean
P
Power Fx
PowerShell
Project Verona
Q#
Small Basic
VPL
XAML
APIs andframeworksNative
Windows API
Silverlight
XNA
DirectX
Managed DirectX
UWP
Xbox Development Kit
Windows Installer
WinUI
.NET
ASP.NET
Core
AJAX
Dynamic Data
MVC
Razor
Web Forms
ADO.NET
Entity Framework
MAUI
CardSpace
Communication Foundation
Identity Foundation
LINQ
Presentation Foundation
Workflow Foundation
Device drivers
WDK
WDF
KMDF
UMDF
Windows HLK
WDM
DatabaseSQL Server
Express
Compact
Management Studio
Business Intelligence Development Studio
MSDE
SQL services
Analysis
Reporting
Integration
Notification
Other
Visual FoxPro
Microsoft Access
Access Database Engine
Extensible Storage Engine
Source control
Visual SourceSafe
Team Foundation Version Control
Testing anddebugging
CodeView
OneFuzz
Playwright
Script Debugger
WinDbg
xUnit.net
Delivery
Active Setup
ClickOnce
npm
NuGet
vcpkg
Web Platform Installer
Windows Installer
WiX
Windows Package Manager
Microsoft Store
 Category




Retrieved from "https://en.wikipedia.org/w/index.php?title=IronPython&oldid=1192392379"
Categories: .NET programming languagesFree software programmed in C SharpMicrosoft free softwareMicrosoft programming languagesPython (programming language) implementationsPython (programming language) librariesSoftware using the Apache license2006 softwareHidden categories: Articles lacking reliable references from January 2013All articles lacking reliable referencesArticles to be expanded from July 2012All articles to be expandedArticles using small message boxesAll articles with unsourced statementsArticles with unsourced statements from August 2009






 This page was last edited on 29 December 2023, at 02:40 (UTC).
Text is available under the Creative Commons Attribution-ShareAlike License 4.0;
additional terms may apply.  By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.


Privacy policy
About Wikipedia
Disclaimers
Contact Wikipedia
Code of Conduct
Developers
Statistics
Cookie statement
Mobile view













Toggle limited content width







