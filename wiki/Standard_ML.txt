



Standard ML - Wikipedia



























Jump to content







Main menu





Main menu
move to sidebar
hide



		Navigation
	


Main pageContentsCurrent eventsRandom articleAbout WikipediaContact usDonate





		Contribute
	


HelpLearn to editCommunity portalRecent changesUpload file





Languages

Language links are at the top of the page.



















Search











Search





























Create account

Log in








Personal tools





 Create account Log in





		Pages for logged out editors learn more



ContributionsTalk




























Contents
move to sidebar
hide




(Top)





1Language



Toggle Language subsection





1.1Functions







1.2Type inference







1.3Declarative definitions







1.4Imperative definitions







1.5Lambda functions







1.6Local definitions







1.7Type synonyms







1.8Algebraic datatypes







1.9Pattern matching





1.9.1Exhaustiveness checking







1.9.2Redundancy checking









1.10Higher-order functions







1.11Exceptions







1.12Module system





1.12.1Signatures







1.12.2Structures







1.12.3Functors











2Code examples



Toggle Code examples subsection





2.1Hello world







2.2Algorithms





2.2.1Insertion sort







2.2.2Mergesort







2.2.3Quicksort









2.3Expression interpreter







2.4Arbitrary-precision integers







2.5Partial application









3Libraries



Toggle Libraries subsection





3.1Standard







3.2Third party









4Implementations







5Major projects using SML







6See also







7References







8External links

















Toggle the table of contents







Standard ML



23 languages




العربيةCatalàČeštinaDanskDeutschEspañolEsperantoفارسیFrançais한국어ՀայերենItalianoქართულიMagyarമലയാളം日本語PolskiPortuguêsРусскийSimple EnglishTürkçeУкраїнська中文

Edit links











ArticleTalk





English

















ReadEditView history







Tools





Tools
move to sidebar
hide



		Actions
	


ReadEditView history





		General
	


What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationCite this pageGet shortened URLDownload QR codeWikidata item





		Print/export
	


Download as PDFPrintable version

























From Wikipedia, the free encyclopedia


General-purpose functional programming language
Standard MLParadigmMulti-paradigm: functional, imperative, modular[1]FamilyMLFirst appeared1983; 41 years ago (1983)[2]Stable releaseStandard ML '97[2]
   / 1997; 27 years ago (1997)
Typing disciplineInferred, static, strongFilename extensions.smlWebsitesmlfamily.github.ioMajor implementationsSML/NJ, MLtonDialectsAlice, Concurrent ML, Dependent MLInfluenced byML, Hope, PascalInfluencedElm, F#, F*, Haskell, OCaml, Python,[3] Rust,[4] Scala
Standard ML (SML) is a general-purpose, modular, functional programming language with compile-time type checking and type inference. It is popular for writing compilers, for programming language research, and for developing theorem provers.
Standard ML is a modern dialect of ML, the language used in the Logic for Computable Functions (LCF) theorem-proving project. It is distinctive among widely used languages in that it has a formal specification, given as typing rules and operational semantics in The Definition of Standard ML.[5]


Language[edit]
This section has multiple issues. Please help improve it or discuss these issues on the talk page. (Learn how and when to remove these template messages)

This section contains instructions, advice, or how-to content. Please help rewrite the content so that it is more encyclopedic or move it to Wikiversity, Wikibooks, or Wikivoyage. (November 2021)
This section does not cite any sources. Please help improve this section by adding citations to reliable sources. Unsourced material may be challenged and removed. (November 2021) (Learn how and when to remove this template message)

 (Learn how and when to remove this template message)
Standard ML is a functional programming language with some impure features. Programs written in Standard ML consist of expressions in contrast to statements or commands, although some expressions of type unit are only evaluated for their side-effects.

Functions[edit]
Like all functional languages, a key feature of Standard ML is the function, which is used for abstraction. The factorial function can be expressed as follows:

fun factorial n = 
    if n = 0 then 1 else n * factorial (n - 1)

Type inference[edit]
An SML compiler must infer the static type val factorial : int -> int without user-supplied type annotations. It has to deduce that n is only used with integer expressions, and must therefore itself be an integer, and that all terminal expressions are integer expressions.

Declarative definitions[edit]
The same function can be expressed with clausal function definitions where the if-then-else conditional is replaced with templates of the factorial function evaluated for specific values:

fun factorial 0 = 1
  | factorial n = n * factorial (n - 1)

Imperative definitions[edit]
or iteratively:

fun factorial n = let val i = ref n and acc = ref 1 in
    while !i > 0 do (acc := !acc * !i; i := !i - 1); !acc
end

Lambda functions[edit]
or as a lambda function:

val rec factorial = fn 0 => 1 | n => n * factorial (n - 1)

Here, the keyword val introduces a binding of an identifier to a value, fn introduces an anonymous function, and rec allows the definition to be self-referential.

Local definitions[edit]
The encapsulation of an invariant-preserving tail-recursive tight loop with one or more accumulator parameters within an invariant-free outer function, as seen here, is a common idiom in Standard ML.
Using a local function, it can be rewritten in a more efficient tail-recursive style:

local
    fun loop (0, acc) = acc
      | loop (m, acc) = loop (m - 1, m * acc)
in
    fun factorial n = loop (n, 1)
end

Type synonyms[edit]
A type synonym is defined with the keyword type. Here is a type synonym for points on a plane, and functions computing the distances between two points, and the area of a triangle with the given corners as per Heron's formula. (These definitions will be used in subsequent examples).

type loc = real * real

fun square (x : real) = x * x

fun dist (x, y) (x', y') =
    Math.sqrt (square (x' - x) + square (y' - y))

fun heron (a, b, c) = let
    val x = dist a b
    val y = dist b c
    val z = dist a c
    val s = (x + y + z) / 2.0
    in
        Math.sqrt (s * (s - x) * (s - y) * (s - z))
    end

Algebraic datatypes[edit]
Standard ML provides strong support for algebraic datatypes (ADT). A data type can be thought of as a disjoint union of tuples (or a "sum of products"). They are easy to define and easy to use, largely because of pattern matching, and most Standard ML implementations' pattern-exhaustiveness checking and pattern redundancy checking.
In object-oriented programming languages, a disjoint union can be expressed as class hierarchies. However, in contrast to class hierarchies, ADTs are closed. Thus, the extensibility of ADTs is orthogonal to the extensibility of class hierarchies. Class hierarchies can be extended with new subclasses which implement the same interface, while the functions of ADTs can be extended for the fixed set of constructors. See expression problem.
A datatype is defined with the keyword datatype, as in:

datatype shape
    = Circle   of loc * real      (* center and radius *)
    | Square   of loc * real      (* upper-left corner and side length; axis-aligned *)
    | Triangle of loc * loc * loc (* corners *)

Note that a type synonym cannot be recursive; datatypes are necessary to define recursive constructors. (This is not at issue in this example.)

Pattern matching[edit]
Patterns are matched in the order in which they are defined. C programmers can use tagged unions, dispatching on tag values, to do what ML does with datatypes and pattern matching. Nevertheless, while a C program decorated with appropriate checks will, in a sense, be as robust as the corresponding ML program, those checks will of necessity be dynamic; ML's static checks provide strong guarantees about the correctness of the program at compile time.
Function arguments can be defined as patterns as follows:

fun area (Circle (_, r)) = Math.pi * square r
  | area (Square (_, s)) = square s
  | area (Triangle p) = heron p (* see above *)

The so-called "clausal form" of function definition, where arguments are defined as patterns, is merely syntactic sugar for a case expression:

fun area shape = case shape of
    Circle (_, r) => Math.pi * square r
  | Square (_, s) => square s
  | Triangle p => heron p

Exhaustiveness checking[edit]
Pattern-exhaustiveness checking will make sure that each constructor of the datatype is matched by at least one pattern. 
The following pattern is not exhaustive:

fun center (Circle (c, _)) = c
  | center (Square ((x, y), s)) = (x + s / 2.0, y + s / 2.0)

There is no pattern for the Triangle case in the center function. The compiler will issue a warning that the case expression is not exhaustive, and if a Triangle is passed to this function at runtime, exception Match will be raised.

Redundancy checking[edit]
The pattern in the second clause of the following (meaningless) function is redundant:

fun f (Circle ((x, y), r)) = x + y
  | f (Circle _) = 1.0
  | f _ = 0.0

Any value that would match the pattern in the second clause would also match the pattern in the first clause, so the second clause is unreachable. Therefore, this definition as a whole exhibits redundancy, and causes a compile-time warning.
The following function definition is exhaustive and not redundant:

val hasCorners = fn (Circle _) => false | _ => true

If control gets past the first pattern (Circle), we know the shape must be either a Square or a Triangle. In either of those cases, we know the shape has corners, so we can return true without discerning the actual shape.

Higher-order functions[edit]
Functions can consume functions as arguments:

fun map f (x, y) = (f x, f y)

Functions can produce functions as return values:

fun constant k = (fn _ => k)

Functions can also both consume and produce functions:

fun compose (f, g) = (fn x => f (g x))

The function List.map from the basis library is one of the most commonly used higher-order functions in Standard ML:

fun map _ [] = []
  | map f (x :: xs) = f x :: map f xs

A more efficient implementation with tail-recursive List.foldl:

fun map f = List.rev o List.foldl (fn (x, acc) => f x :: acc) []

Exceptions[edit]
Exceptions are raised with the keyword raise and handled with the pattern matching handle construct. The exception system can implement non-local exit; this optimization technique is suitable for functions like the following.

local
    exception Zero;
    val p = fn (0, _) => raise Zero | (a, b) => a * b
in
    fun prod xs = List.foldl p 1 xs handle Zero => 0
end

When exception Zero is raised, control leaves the function List.foldl altogether. Consider the alternative: the value 0 would be returned, it would be multiplied by the next integer in the list, the resulting value (inevitably 0) would be returned, and so on. The raising of the exception allows control to skip over the entire chain of frames and avoid the associated computation. Note the use of the underscore (_) as a wildcard pattern.
The same optimization can be obtained with a tail call.

local
    fun p a (0 :: _) = 0
      | p a (x :: xs) = p (a * x) xs
      | p a [] = a
in
    val prod = p 1
end

Module system[edit]
Standard ML's advanced module system allows programs to be decomposed into hierarchically organized structures of logically related type and value definitions. Modules provide not only namespace control but also abstraction, in the sense that they allow the definition of abstract data types. Three main syntactic constructs comprise the module system: signatures, structures and functors.

Signatures[edit]
A signature is an interface, usually thought of as a type for a structure; it specifies the names of all entities provided by the structure, the arity of each type component, the type of each value component, and the signature of each substructure. The definitions of type components are optional; type components whose definitions are hidden are abstract types.
For example, the signature for a queue may be:

signature QUEUE = sig
    type 'a queue
    exception QueueError;
    val empty     : 'a queue
    val isEmpty   : 'a queue -> bool
    val singleton : 'a -> 'a queue
    val fromList  : 'a list -> 'a queue
    val insert    : 'a * 'a queue -> 'a queue
    val peek      : 'a queue -> 'a
    val remove    : 'a queue -> 'a * 'a queue
end

This signature describes a module that provides a polymorphic type 'a queue, exception QueueError, and values that define basic operations on queues.

Structures[edit]
A structure is a module; it consists of a collection of types, exceptions, values and structures (called substructures) packaged together into a logical unit.
A queue structure can be implemented as follows:

structure TwoListQueue :> QUEUE = struct
    type 'a queue = 'a list * 'a list

    exception QueueError;

    val empty = ([], [])

    fun isEmpty ([], []) = true
      | isEmpty _ = false

    fun singleton a = ([], [a])

    fun fromList a = ([], a)

    fun insert (a, ([], [])) = singleton a
      | insert (a, (ins, outs)) = (a :: ins, outs)

    fun peek (_, []) = raise QueueError
      | peek (ins, outs) = List.hd outs

    fun remove (_, []) = raise QueueError
      | remove (ins, [a]) = (a, ([], List.rev ins))
      | remove (ins, a :: outs) = (a, (ins, outs))
end

This definition declares that structure TwoListQueue implements signature QUEUE. Furthermore, the opaque ascription denoted by :> states that any types which are not defined in the signature (i.e. type 'a queue) should be abstract, meaning that the definition of a queue as a pair of lists is not visible outside the module. The structure implements all of the definitions in the signature.
The types and values in a structure can be accessed with "dot notation":

val q : string TwoListQueue.queue = TwoListQueue.empty
val q' = TwoListQueue.insert (Real.toString Math.pi, q)

Functors[edit]
A functor is a function from structures to structures; that is, a functor accepts one or more arguments, which are usually structures of a given signature, and produces a structure as its result. Functors are used to implement generic data structures and algorithms.
One popular algorithm[6] for breadth-first search of trees makes use of queues. Here is a version of that algorithm parameterized over an abstract queue structure:

(* after Okasaki, ICFP, 2000 *)
functor BFS (Q: QUEUE) = struct
  datatype 'a tree = E | T of 'a * 'a tree * 'a tree

  local
    fun bfsQ q = if Q.isEmpty q then [] else search (Q.remove q)
    and search (E, q) = bfsQ q
      | search (T (x, l, r), q) = x :: bfsQ (insert (insert q l) r)
    and insert q a = Q.insert (a, q)
  in
    fun bfs t = bfsQ (Q.singleton t)
  end
end

structure QueueBFS = BFS (TwoListQueue)

Within functor BFS, the representation of the queue is not visible. More concretely, there is no way to select the first list in the two-list queue, if that is indeed the representation being used. This data abstraction mechanism makes the breadth-first search truly agnostic to the queue's implementation. This is in general desirable; in this case, the queue structure can safely maintain any logical invariants on which its correctness depends behind the bulletproof wall of abstraction.

Code examples[edit]



Wikibooks has a book on the topic of: Standard ML Programming

This section does not cite any sources. Please help improve this section by adding citations to reliable sources. Unsourced material may be challenged and removed. (June 2013) (Learn how and when to remove this template message)
Snippets of SML code are most easily studied by entering them into an interactive top-level.

Hello world[edit]
The following is a Hello, world! program:



hello.sml



print "Hello, world!\n";



bash



$ mlton hello.sml
$ ./hello
Hello, world!


Algorithms[edit]
Insertion sort[edit]
Insertion sort for int list (ascending) can be expressed concisely as follows:

fun insert (x, []) = [x] | insert (x, h :: t) = sort x (h, t)
and sort x (h, t) = if x < h then [x, h] @ t else h :: insert (x, t)
val insertionsort = List.foldl insert []

Mergesort[edit]
Main article: Merge sort
Here, the classic mergesort algorithm is implemented in three functions: split, merge and mergesort. Also note the absence of types, with the exception of the syntax op :: and [] which signify lists. This code will sort lists of any type, so long as a consistent ordering function cmp is defined. Using Hindley–Milner type inference, the types of all variables can be inferred, even complicated types such as that of the function cmp.
Split
fun split is implemented with a stateful closure which alternates between true and false, ignoring the input:

fun alternator {} = let val state = ref true
    in fn a => !state before state := not (!state) end

(* Split a list into near-halves which will either be the same length,
 * or the first will have one more element than the other.
 * Runs in O(n) time, where n = |xs|.
 *)
fun split xs = List.partition (alternator {}) xs

Merge
Merge uses a local function loop for efficiency. The inner loop is defined in terms of cases: when both lists are non-empty (x :: xs) and when one list is empty ([]).
This function merges two sorted lists into one sorted list. Note how the accumulator acc is built backwards, then reversed before being returned. This is a common technique, since 'a list is represented as a linked list; this technique requires more clock time, but the asymptotics are not worse.

(* Merge two ordered lists using the order cmp.
 * Pre: each list must already be ordered per cmp.
 * Runs in O(n) time, where n = |xs| + |ys|.
 *)
fun merge cmp (xs, []) = xs
  | merge cmp (xs, y :: ys) = let
    fun loop (a, acc) (xs, []) = List.revAppend (a :: acc, xs)
      | loop (a, acc) (xs, y :: ys) =
        if cmp (a, y)
        then loop (y, a :: acc) (ys, xs)
        else loop (a, y :: acc) (xs, ys)
    in
        loop (y, []) (ys, xs)
    end

Mergesort
The main function:

fun ap f (x, y) = (f x, f y)

(* Sort a list in according to the given ordering operation cmp.
 * Runs in O(n log n) time, where n = |xs|.
 *)
fun mergesort cmp [] = []
  | mergesort cmp [x] = [x]
  | mergesort cmp xs = (merge cmp o ap (mergesort cmp) o split) xs

Quicksort[edit]
Main article: Quicksort
Quicksort can be expressed as follows. fun part is a closure that consumes an order operator op <<.

infix <<

fun quicksort (op <<) = let
    fun part p = List.partition (fn x => x << p)
    fun sort [] = []
      | sort (p :: xs) = join p (part p xs)
    and join p (l, r) = sort l @ p :: sort r
    in
        sort
    end

Expression interpreter[edit]
Note the relative ease with which a small expression language can be defined and processed:

exception TyErr;

datatype ty = IntTy | BoolTy

fun unify (IntTy, IntTy) = IntTy
  | unify (BoolTy, BoolTy) = BoolTy
  | unify (_, _) = raise TyErr

datatype exp
    = True
    | False
    | Int of int
    | Not of exp
    | Add of exp * exp
    | If  of exp * exp * exp

fun infer True = BoolTy
  | infer False = BoolTy
  | infer (Int _) = IntTy
  | infer (Not e) = (assert e BoolTy; BoolTy)
  | infer (Add (a, b)) = (assert a IntTy; assert b IntTy; IntTy)
  | infer (If (e, t, f)) = (assert e BoolTy; unify (infer t, infer f))
and assert e t = unify (infer e, t)

fun eval True = True
  | eval False = False
  | eval (Int n) = Int n
  | eval (Not e) = if eval e = True then False else True
  | eval (Add (a, b)) = (case (eval a, eval b) of (Int x, Int y) => Int (x + y))
  | eval (If (e, t, f)) = eval (if eval e = True then t else f)

fun run e = (infer e; SOME (eval e)) handle TyErr => NONE

Example usage on well-typed and ill-typed expressions:

val SOME (Int 3) = run (Add (Int 1, Int 2)) (* well-typed *)
val NONE = run (If (Not (Int 1), True, False)) (* ill-typed *)

Arbitrary-precision integers[edit]
The IntInf module provides arbitrary-precision integer arithmetic. Moreover, integer literals may be used as arbitrary-precision integers without the programmer having to do anything.
The following program implements an arbitrary-precision factorial function:



fact.sml



fun fact n : IntInf.int = if n = 0 then 1 else n * fact (n - 1);

fun printLine str = let in
    TextIO.output (TextIO.stdOut, str);
    TextIO.output (TextIO.stdOut, "\n")
end;

val () = printLine (IntInf.toString (fact 120));



bash



$ mlton fact.sml
$ ./fact
6689502913449127057588118054090372586752746333138029810295671352301
6335572449629893668741652719849813081576378932140905525344085894081
21859898481114389650005964960521256960000000000000000000000000000


Partial application[edit]
Curried functions have many applications, such as eliminating redundant code. For example, a module may require functions of type a -> b, but it is more convenient to write functions of type a * c -> b where there is a fixed relationship between the objects of type a and c. A function of type c -> (a * c -> b) -> a -> b can factor out this commonality. This is an example of the adapter pattern.[citation needed]
In this example, fun d computes the numerical derivative of a given function f at point x:

- fun d delta f x = (f (x + delta) - f (x - delta)) / (2.0 * delta)
val d = fn : real -> (real -> real) -> real -> real

The type of fun d indicates that it maps a "float" onto a function with the type (real -> real) -> real -> real. This allows us to partially apply arguments, known as currying. In this case, function d can be specialised by partially applying it with the argument delta. A good choice for delta when using this algorithm is the cube root of the machine epsilon.[citation needed]

- val d' = d 1E~8;
val d' = fn : (real -> real) -> real -> real

The inferred type indicates that d' expects a function with the type real -> real as its first argument. We can compute an approximation to the derivative of 



f
(
x
)
=

x

3


−
x
−
1


{\displaystyle f(x)=x^{3}-x-1}

 at 



x
=
3


{\displaystyle x=3}

. The correct answer is 




f
′

(
3
)
=
27
−
1
=
26


{\displaystyle f'(3)=27-1=26}

.

- d' (fn x => x * x * x - x - 1.0) 3.0;
val it = 25.9999996644 : real

Libraries[edit]
Standard[edit]
The Basis Library[7] has been standardized and ships with most implementations. It provides modules for trees, arrays, and other data structures, and input/output and system interfaces.

Third party[edit]
For numerical computing, a Matrix module exists (but is currently broken), https://www.cs.cmu.edu/afs/cs/project/pscico/pscico/src/matrix/README.html.
For graphics, cairo-sml is an open source interface to the Cairo graphics library. For machine learning, a library for graphical models exists.

Implementations[edit]
Implementations of Standard ML include the following:
Standard

HaMLet: a Standard ML interpreter that aims to be an accurate and accessible reference implementation of the standard
MLton (mlton.org): a whole-program optimizing compiler which strictly conforms to the Definition and produces very fast code compared to other ML implementations, including backends for LLVM and C
Moscow ML: a light-weight implementation, based on the Caml Light runtime engine which implements the full Standard ML language, including modules and much of the basis library
Poly/ML: a full implementation of Standard ML that produces fast code and supports multicore hardware (via Portable Operating System Interface (POSIX) threads); its runtime system performs parallel garbage collection and online sharing of immutable substructures.
Standard ML of New Jersey (smlnj.org): a full compiler, with associated libraries, tools, an interactive shell, and documentation with support for Concurrent ML
SML.NET: a Standard ML compiler for the Common Language Runtime with extensions for linking with other .NET framework code
ML Kit Archived 2016-01-07 at the Wayback Machine: an implementation based very closely on the Definition, integrating a garbage collector (which can be disabled) and region-based memory management with automatic inference of regions, aiming to support real-time applications
Derivative

Alice: an interpreter for Standard ML by Saarland University with support for parallel programming using futures, lazy evaluation, distributed computing via remote procedure calls and constraint programming
SML#: an extension of SML providing record polymorphism and C language interoperability. It is a conventional native compiler and its name is not an allusion to running on the .NET framework
SOSML: an implementation written in TypeScript, supporting most of the SML language and select parts of the basis library
Research

CakeML is a REPL version of ML with formally verified runtime and translation to assembler.
Isabelle (Isabelle/ML) integrates parallel Poly/ML into an interactive theorem prover, with a sophisticated IDE (based on jEdit) for official Standard ML (SML'97), the Isabelle/ML dialect, and the proof language. Starting with Isabelle2016, there is also a source-level debugger for ML.
Poplog implements a version of Standard ML, along with Common Lisp and Prolog, allowing mixed language programming; all are implemented in POP-11, which is compiled incrementally.
TILT is a full certifying compiler for Standard ML which uses typed intermediate languages to optimize code and ensure correctness, and can compile to typed assembly language.
All of these implementations are open-source and freely available. Most are implemented themselves in Standard ML. There are no longer any commercial implementations; Harlequin, now defunct, once produced a commercial IDE and compiler called MLWorks which passed on to Xanalys and was later open-sourced after it was acquired by Ravenbrook Limited on April 26, 2013.

Major projects using SML[edit]
The IT University of Copenhagen's entire enterprise architecture is implemented in around 100,000 lines of SML, including staff records, payroll, course administration and feedback, student project management, and web-based self-service interfaces.[8]
The proof assistants HOL4, Isabelle, LEGO, and Twelf are written in Standard ML. It is also used by compiler writers and integrated circuit designers such as ARM.[9]

See also[edit]
Declarative programming
References[edit]


^ a b "Programming in Standard ML: Hierarchies and Parameterization". Retrieved 2020-02-22.

^ a b c "SML '97". www.smlnj.org.

^ a b "itertools — Functions creating iterators for efficient looping — Python 3.7.1rc1 documentation". docs.python.org.

^ "Influences - The Rust Reference". The Rust Reference. Retrieved 2023-12-31.

^ a b Milner, Robin; Tofte, Mads; Harper, Robert; MacQueen, David (1997). The Definition of Standard ML (Revised). MIT Press. ISBN 0-262-63181-4.

^ a b Okasaki, Chris (2000). "Breadth-First Numbering: Lessons from a Small Exercise in Algorithm Design". International Conference on Functional Programming 2000. ACM.

^ "Standard ML Basis Library". smlfamily.github.io. Retrieved 2022-01-10.

^ a b Tofte, Mads (2009). "Standard ML language". Scholarpedia. 4 (2): 7515. Bibcode:2009SchpJ...4.7515T. doi:10.4249/scholarpedia.7515.

^ a b Alglave, Jade; Fox, Anthony C. J.; Ishtiaq, Samin; Myreen, Magnus O.; Sarkar, Susmit; Sewell, Peter; Nardelli, Francesco Zappa (2009). The Semantics of Power and ARM Multiprocessor Machine Code (PDF). DAMP 2009. pp. 13–24. Archived (PDF) from the original on 2017-08-14.


External links[edit]
About Standard ML

Revised definition
Standard ML Family GitHub Project Archived 2020-02-20 at the Wayback Machine
What is SML?
What is SML '97?
About successor ML

successor ML (sML): evolution of ML using Standard ML as a starting point
HaMLet on GitHub: reference implementation for successor ML
Practical

Basic introductory tutorial
Examples in Rosetta Code
Academic

Programming in Standard ML
Programming in Standard ML '97: An Online Tutorial
vteProgramming languages
Comparison
Timeline
History

Ada
ALGOL
APL
ArkTS
Assembly
BASIC
C
C++
C#
Classic Visual Basic
COBOL
Erlang
Forth
Fortran
Go
Haskell
Java
JavaScript
Julia
Kotlin
Lisp
Lua
MATLAB
ML
Object Pascal
Pascal
Perl
PHP
Prolog
Python
R
Ruby
Rust
SQL
Scratch
Shell
Simula
Smalltalk
Swift
Visual Basic
more...

 Lists: Alphabetical
Categorical
Generational
Non-English-based
 Category

Authority control databases: National 
Germany





Retrieved from "https://en.wikipedia.org/w/index.php?title=Standard_ML&oldid=1194864389"
Categories: ML programming language familyFunctional languagesProcedural programming languagesProgramming languages created in 1990Hidden categories: Articles with short descriptionShort description is different from WikidataArticles needing cleanup from November 2021All pages needing cleanupArticles containing how-to sectionsArticles needing additional references from November 2021All articles needing additional referencesArticles with multiple maintenance issuesArticles needing additional references from June 2013All articles with unsourced statementsArticles with unsourced statements from May 2015Articles with unsourced statements from August 2008Webarchive template wayback linksArticles with GND identifiers






 This page was last edited on 11 January 2024, at 03:30 (UTC).
Text is available under the Creative Commons Attribution-ShareAlike License 4.0;
additional terms may apply.  By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.


Privacy policy
About Wikipedia
Disclaimers
Contact Wikipedia
Code of Conduct
Developers
Statistics
Cookie statement
Mobile view













Toggle limited content width







